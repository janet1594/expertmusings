#This script copies the AMI to other region and tag copied AMI 'DeleteOnCopy' with retention  days specified.
import boto3
import json
from dateutil import parser
import dateutil
import datetime
import collections

#Specify the source region of AMI's created and the destination region to which AMI's to be copied
source_region = 'us-east-2'
dest_region = 'ap-south-1'
source_resource = boto3.resource('ec2',source_region)
dest_client = boto3.client('ec2',dest_region)
dest_resource  = boto3.resource('ec2',dest_region)

#AMI to be retained for the number of days in the destination region.
snap_retention = 15

def copy_latest_snap():
    snaphots_list = source_resource.snapshots.filter(OwnerIds=["xxxx"]) # Specify your AWS account owner id in place of "XXXXX" at all the places in this script
    
    #Retention days in DR region, its for 15 days.
    retention_days = int(snap_retention)
	
    to_tag = collections.defaultdict(list)
    
    for snap in snaphots_list:
        snap_date = snap.start_time
        
        #Copy todays snaphots
        if snap_date.date() == (datetime.datetime.today()).date(): 
        
	    #To Copy previous day snaphots
		            
            if not dest_client.describe_snapshots(OwnerIds=["xxxx",])['Snapshots']:
            
            
                print ("Copying shapshot to mumbai")
                new_snap = dest_client.copy_snapshot(
                    DryRun=False,
                    SourceRegion=source_region,
                    SourceSnapshotId=snap.snapshot_id,
                    Description=snap.description
                )
                
                to_tag[retention_days].append(new_snap['SnapshotId'])
                
                print ("New snap Id  for source Image ")
                
                
                print ("Retaining AMI %s for %d days" )
                    
                for snap_retention_days in to_tag.keys():
                    delete_date = datetime.date.today() + datetime.timedelta(days=retention_days)
                    delete_fmt = delete_date.strftime('%d-%m-%Y')
                    print ("Will delete %d AMIs on %s" % (len(to_tag[retention_days]), delete_fmt))
                    
                    #To create a tag to an AMI when it can be deleted after retention period expires
                    dest_client.create_tags(
                        Resources=to_tag[retention_days],
                        Tags=[
                            {'Key': 'DeleteOnCopy', 'Value': delete_fmt},
                            ]
                        )
            else:
                print ("snap already present in Mumbai Region")

def lambda_handler(event, context):
    copy_latest_snap()
