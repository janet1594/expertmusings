#!/usr/bin/env python
import time
import boto3
import string
import sys

def lambda_handler(event, context):
    client = boto3.client('elb')
    elb_name = event['key2']
    print (elb_name)
    bals = client.describe_load_balancers()
    for elb in bals['LoadBalancerDescriptions']:

        set2 = elb['LoadBalancerName']
        if elb_name == set2 :

            
            inst = elb['Instances']
            
            for i in inst:
                id = str(i.values())
                id = str.replace(id, "dict_values(['", "")
                instance_id = str.replace(id, "'])", "")
            print (instance_id)
            client.deregister_instances_from_load_balancer(LoadBalancerName=set2,Instances=[
        {
            'InstanceId': instance_id
        },
    ]
)
            print ("Removing instance_id" )
            timeout = time.time() + 60*5 # 5 minutes
            while True:
                health = client.describe_instance_health(LoadBalancerName=set2,Instances=[
        {
            'InstanceId': instance_id
        },
    ]
)
                health = health['InstanceStates'][0]['State']
                assert time.time() < timeout
                if health == 'OutOfService':
                   break
                print ('Waiting for removal...')
                time.sleep(1)


            print ('Done')
            
            
            ssm_client = boto3.client('ssm')
            response = ssm_client.send_command(
            InstanceIds=[instance_id],
            DocumentName="AWS-RunPowerShellScript",
            Parameters={"commands": [event['key1']]}, )
            
            command_id = response['Command']['CommandId']
            print("Done")
	
            
            client.register_instances_with_load_balancer(LoadBalancerName=set2,Instances=[
        {
            'InstanceId': instance_id
        },
    ]
)

            start = time.time()
            print ('Adding instance to ELB')

            health = client.describe_instance_health(LoadBalancerName=set2,Instances=[
        {
            'InstanceId': instance_id
        },
    ]
)
            health = health['InstanceStates'][0]['State']
            assert time.time() < timeout
            if health == 'InService':
                break
            time.sleep(1)

            print ('Instance now successfully InService in ELB') 
